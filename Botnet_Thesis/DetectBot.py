import LoadData
import DataPreparation
import pickle
import warnings
from sklearn.metrics import accuracy_score
from sklearn.metrics import precision_score
from sklearn.metrics import recall_score
from sklearn.metrics import f1_score
from sklearn.discriminant_analysis import LinearDiscriminantAnalysis
warnings.filterwarnings("ignore")
LoadData.loaddata('flowdata.csv')
file = open('flowdata.pickle', 'rb')
data  = pickle.load(file)
Xdata = data[0]
Ydata =  data[1]
XdataT = data[2]
YdataT = data[3]
from sklearn.linear_model import *
from sklearn.tree import *
from sklearn.naive_bayes import *
from sklearn.neighbors import *
from sklearn.svm import SVC
DataPreparation.Prepare(Xdata,Ydata,XdataT,YdataT)
clf = DecisionTreeClassifier()
clf.fit(Xdata,Ydata)
Prediction = clf.predict(XdataT)
Score = clf.score(XdataT,YdataT)
Precision = precision_score(Prediction,YdataT)
Recall = recall_score(Prediction,YdataT)
Accuracy = accuracy_score(Prediction,YdataT)
F1=f1_score(Prediction,YdataT)
print ("The Accuracy of the Decision Tree Classifier is", Accuracy)
print ("The Score of the Decision Tree Classifier is", Score * 100)
print ("The Precision of the Decision Tree Classifier is", Precision)
print ("The Recall of the Decision Tree Classifier is", Recall)
print ("The F1 Score of the Decision Tree Classifier is", F1)
clf = LogisticRegression(C=10000)
clf.fit(Xdata,Ydata)
Prediction = clf.predict(XdataT)
Score = clf.score(XdataT,YdataT)
Precision = precision_score(Prediction,YdataT)
Recall = recall_score(Prediction,YdataT)
Accuracy = accuracy_score(Prediction,YdataT)
F1=f1_score(Prediction,YdataT)
print ("The Accuracy of the Logistic Regression Classifier is", Accuracy)
print ("The Score of the Logistic Regression Classifier is", Score * 100)
print ("The Precision of the Logistic Regression Classifier is", Precision)
print ("The Recall of the Logistic Regression Classifier is", Recall)
print ("The F1 Score of the Logistic Regression Classifier is", F1)
clf = GaussianNB()
clf.fit(Xdata,Ydata)
Prediction = clf.predict(XdataT)
Score = clf.score(XdataT,YdataT)
Precision = precision_score(Prediction,YdataT)
Recall = recall_score(Prediction,YdataT)
Accuracy = accuracy_score(Prediction,YdataT)
F1=f1_score(Prediction,YdataT)
print ("The Accuracy of the Gaussian Naive Bayes Classifier is", Accuracy)
print("The Score of the Gaussian Naive Bayes classifier is", Score * 100)
print ("The Precision of the Naive Bayes Classifier is", Precision)
print ("The Recall of the Naive Bayes Classifier is", Recall)
print ("The F1 Score of the Naive Bayes Classifier is", F1)
clf = KNeighborsClassifier()
clf.fit(Xdata,Ydata)
Prediction = clf.predict(XdataT)
Score = clf.score(XdataT,YdataT)
Precision = precision_score(Prediction,YdataT)
Recall = recall_score(Prediction,YdataT)
Accuracy = accuracy_score(Prediction,YdataT)
F1=f1_score(Prediction,YdataT)
print ("The Accuracy of the K-Nearest Neighbours Classifier is", Accuracy)
print("The Score of the K-Nearest Neighbours classifier is", Score * 100)
print ("The Precision of the K-Nearest Neighbours Classifier is", Precision)
print ("The Recall of the K-Nearest Neighbours Classifier is", Recall)
print ("The F1 Score of the K-Nearest Neighbours Classifier is", F1)
clf = SVC()
clf.fit(Xdata,Ydata)
Prediction = clf.predict(XdataT)
Score = clf.score(XdataT,YdataT)
Precision = precision_score(Prediction,YdataT)
Recall = recall_score(Prediction,YdataT)
Accuracy = accuracy_score(Prediction,YdataT)
F1=f1_score(Prediction,YdataT)
print ("The Accuracy of the Support Vector Machine is", Accuracy)
print("The Score of the Support Vector Machine is", Score * 100)
print ("The Precision of the Support Vector Machine is", Precision)
print ("The Recall of the Support Vector Machine is", Recall)
print ("The F1 Score of the Support Vector Machine is", F1)
clf = LinearDiscriminantAnalysis()
clf.fit(Xdata,Ydata)
Prediction = clf.predict(XdataT)
Score = clf.score(XdataT,YdataT)
Precision = precision_score(Prediction,YdataT)
Recall = recall_score(Prediction,YdataT)
Accuracy = accuracy_score(Prediction,YdataT)
F1=f1_score(Prediction,YdataT)
print ("The Accuracy of the Linear Discriminant Analysis is", Accuracy)
print("The Score of the Linear Discriminant Analysis is", Score * 100)
print ("The Precision of the Linear Discriminant Analysis is", Precision)
print ("The Recall of the Linear Discriminant Analysis is", Recall)
print ("The F1 Score of the Linear Discriminant Analysis is", F1)

